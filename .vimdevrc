" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
" also required for Vundle.
set nocompatible

" Vundle-specific settings
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" NerdTree: alternative file explorer
Plugin 'scrooloose/nerdtree'

" UltiSnips: Snippets (tab-completing specified keywords 
Plugin 'SirVer/ultisnips'

" Fugitive: :G* git commands
Plugin 'tpope/vim-fugitive'

" Jinja2 Syntax:
Plugin 'Glench/Vim-Jinja2-Syntax'

" Rust Syntax:
Plugin 'rust-lang/rust.vim'

" HashiCorpLang Syntax:
Plugin 'jvirtanen/vim-hcl'

" Async Language Server Protocol Plugin / deps
Plugin 'prabirshrestha/async.vim'
Plugin 'prabirshrestha/vim-lsp'
Plugin 'prabirshrestha/asyncomplete.vim'
Plugin 'prabirshrestha/asyncomplete-lsp.vim'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
" NerdTree-specific settings {{{

nnoremap <c-h> :NERDTreeToggle<CR>
" }}}

" UltiSnips-specific settings {{{

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="horizontal"


" }}}

"Fugitive settings {{{
set diffopt+=vertical
" }}}
"
"vim-lsp settings {{{

let g:asyncomplete_auto_popup = 0

let g:lsp_signs_enabled = 1
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_signs_error = {'text': '✗:'}
let g:lsp_signs_warning = {'text': '✗:'}
let g:lsp_signs_information = {'text': 'ℹ:'}
let g:lsp_signs_hint = {'text': 'ℹ:'}
let g:lsp_textprop_enabled = 0


imap <c-n> <Plug>(asyncomplete_force_refresh)

au FileType rust,go nmap gd <Plug>(lsp-definition)
au FileType rust,go nmap gr <Plug>(lsp-references)
au FileType rust,go nmap gc <Plug>(lsp-code-action)
au FileType rust,go set signcolumn=yes

if executable('rls')
    au User lsp_setup call lsp#register_server({
                \ 'name': 'rls',
                \ 'cmd': {server_info->['rustup', 'run', 'stable', 'rls']},
                \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'Cargo.toml'))},
                \ 'whitelist': ['rust'],
                \ })
endif

if executable('yaml-language-server')
    au User lsp_setup call lsp#register_server({
                \ 'name': 'yaml-language-server',
                \ 'cmd': {server_info->['node', '/usr/local/bin/yaml-language-server', '--stdio']},
                \ 'whitelist': ['yaml'],
                \ })
endif

if executable('gopls')
    au User lsp_setup call lsp#register_server({
                \ 'name': 'gopls',
                \ 'cmd': {server_info->['gopls', '-mode', 'stdio']},
                \ 'whitelist': ['go'],
                \ })
endif

" }}}

" function! StartUp()
"         NERDTree
" endfunction
" 
" autocmd VimEnter * call StartUp()
" 

source ~/.vimrc

" vim: set fdm=marker filetype=vim syntax=vim:
