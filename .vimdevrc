" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
" also required for Vundle.
set nocompatible

" Vundle-specific settings
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" Syntastic: syntax check plugin
Plugin 'vim-syntastic/syntastic'

" Ale: syntax check plugin
" Plugin 'w0rp/ale'

" NerdTree: alternative file explorer
Plugin 'scrooloose/nerdtree'

" UltiSnips: Snippets (tab-completing specified keywords 
Plugin 'SirVer/ultisnips'

" Ctrl-P: Fuzzy searching
Plugin 'kien/ctrlp.vim'

" Fugitive:
Plugin 'tpope/vim-fugitive'

" Neocomplete:
Plugin 'Shougo/neocomplete'

" ClangCompletion:
Plugin 'justmao945/vim-clang'

" NodejsComplete:
Plugin 'myhere/vim-nodejs-complete'

" vim-terraform:
Plugin 'hashivim/vim-terraform'

" Jinja2 Syntax:
Plugin 'Glench/Vim-Jinja2-Syntax'

" Rust Syntax:
Plugin 'rust-lang/rust.vim'

" Rust Autocomplete:
Plugin 'racer-rust/vim-racer'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
" NerdTree-specific settings {{{

nnoremap <c-h> :NERDTreeToggle<CR>
" }}}

" UltiSnips-specific settings {{{

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="horizontal"


" }}}

" Neocomplete settings{{{
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0

" Use neocomplete.
let g:neocomplete#enable_at_startup = 1

" Use smartcase.
let g:neocomplete#enable_smart_case = 1

" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
            \ 'default' : '',
            \ 'vimshell' : $HOME.'/.vimshell_hist',
            \ 'scheme' : $HOME.'/.gosh_completions'
            \ }

" Manual completion using C-n
let g:neocomplete#disable_auto_complete=1
inoremap <expr><C-n>  pumvisible() ? "\<C-n>" : neocomplete#start_manual_complete()."\<C-n>"
inoremap <expr><C-j>  neocomplete#start_manual_complete()

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>    neocomplete#undo_completion()
inoremap <expr><C-l>    neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
    return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
    " For no inserting <CR> key.
    "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction

" <TAB>: completion.
"inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()
"inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

" AutoComplPop like behavior.
"let g:neocomplete#enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^.  \t]->\h\w*\|\h\w*::'
let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
""}}}

"Fugitive settings {{{
set diffopt+=vertical
" }}}
"
"Vim-Racer settings {{{
au FileType rust nmap gd <Plug>(rust-def)
au FileType rust nmap gx <Plug>(rust-doc)
" }}}

" function! StartUp()
"         NERDTree
" endfunction
" 
" autocmd VimEnter * call StartUp()
" 

source ~/.vimrc

" vim: set fdm=marker filetype=vim syntax=vim:
