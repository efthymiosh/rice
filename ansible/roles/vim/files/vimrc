
" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" Vundle-specific settings
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" NerdTree: alternative file explorer
Plugin 'scrooloose/nerdtree'

" UltiSnips: Snippets (tab-completing specified keywords 
Plugin 'SirVer/ultisnips'

" Fugitive: :G* git commands
Plugin 'tpope/vim-fugitive'

" Jinja2 Syntax:
Plugin 'Glench/Vim-Jinja2-Syntax'

" Rust Syntax:
Plugin 'rust-lang/rust.vim'

" HashiCorpLang Syntax:
Plugin 'jvirtanen/vim-hcl'
Plugin 'hashivim/vim-terraform'

" Async Language Server Protocol Plugin / deps
Plugin 'prabirshrestha/async.vim'
Plugin 'prabirshrestha/vim-lsp'
Plugin 'prabirshrestha/asyncomplete.vim'
Plugin 'prabirshrestha/asyncomplete-lsp.vim'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
" NerdTree-specific settings {{{

nnoremap <c-h> :NERDTreeToggle<CR>
" }}}

" UltiSnips-specific settings {{{

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="horizontal"


" }}}

"Fugitive settings {{{
set diffopt+=vertical
" }}}
"
"vim-lsp settings {{{

let g:asyncomplete_auto_popup = 0

let g:lsp_signs_enabled = 1
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_signs_error = {'text': '✗:'}
let g:lsp_signs_warning = {'text': '✗:'}
let g:lsp_signs_information = {'text': 'ℹ:'}
let g:lsp_signs_hint = {'text': 'ℹ:'}
let g:lsp_textprop_enabled = 0


imap <c-n> <Plug>(asyncomplete_force_refresh)

au FileType rust,go,python nmap gd <Plug>(lsp-definition)
au FileType rust,go,python nmap gr <Plug>(lsp-references)
au FileType rust,go,python nmap gc <Plug>(lsp-code-action)
au FileType rust,go,python set signcolumn=yes

if executable('rls')
    au User lsp_setup call lsp#register_server({
                \ 'name': 'rls',
                \ 'cmd': {server_info->['rls']},
                \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'Cargo.toml'))},
                \ 'whitelist': ['rust'],
                \ })
endif

if executable('yaml-language-server')
    au User lsp_setup call lsp#register_server({
                \ 'name': 'yaml-language-server',
                \ 'cmd': {server_info->['node', '/usr/local/bin/yaml-language-server', '--stdio']},
                \ 'whitelist': ['yaml'],
                \ })
endif

if executable('gopls')
    au User lsp_setup call lsp#register_server({
                \ 'name': 'gopls',
                \ 'cmd': {server_info->['gopls', '-mode', 'stdio']},
                \ 'whitelist': ['go'],
                \ })
endif

if executable('pyls')
   au User lsp_setup call lsp#register_server({
               \ 'name': 'pyls',
               \ 'cmd': {server_info->['pyls']},
               \ 'whitelist': ['python'],
               \ })
endif

" }}}

" function! StartUp()
"         NERDTree
" endfunction
" 
" autocmd VimEnter * call StartUp()
" 

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

set history=50  " keep 50 lines of command line history
set ruler       " show the cursor position all the time
set showcmd     " display incomplete commands
set incsearch   " do incremental searching

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
    set mouse=a
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
    syntax on
    set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

    " Enable file type detection.
    " Use the default filetype settings, so that mail gets 'tw' set to 72,
    " 'cindent' is on in C files, etc.
    " Also load indent files, to automatically do language-dependent indenting.
    filetype plugin indent on

    " Put these in an autocmd group, so that we can delete them easily.
    augroup vimrcEx
        au!

        " For all text files set 'textwidth' to 78 characters.
        autocmd FileType text setlocal textwidth=78

        " When editing a file, always jump to the last known cursor position.
        " Don't do it when the position is invalid or when inside an event handler
        " (happens when dropping a file on gvim).
        " Also don't do it when the mark is in the first line, that is the default
        " position when opening a file.
        autocmd BufReadPost *
                    \ if line("'\"") > 1 && line("'\"") <= line("$") |
                    \   exe "normal! g`\"" |
                    \ endif

    augroup END

else

    set autoindent		" always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
    command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
                \ | wincmd p | diffthis
endif

"** Efthymios conf **"

"Set alternative greek keymap while in insert mode.
"(ctrl + 6 to switch between keymaps)
set keymap=greek_utf-8
"set default insert keymap on startup
set iminsert=0
"set search keymap same as insert keymap
set imsearch=-1


"Force 8 colors for 88color/256color terminals. We are humans, not mantis shrimps.
if &t_Co > 8
    set t_Co=8
endif

" No annoying vim files in my folders (Enabling adds features, e.g. cross-session undos)
set noswapfile 
set noundofile
set nobackup

" Tab key shows as 4 characters, tab key inserts spaces, auto indentation 4 spaces.
set tabstop=4
set shiftwidth=4
set expandtab

" Visual menu on command autocomplete (on TAB, not Ctrl+d)
set wildmenu

" Allow for hidden buffers (buffer switching without being forced to save)
set hidden

if has("autocmd")
    " Support Format-Flowed when composing mail.
    autocmd FileType mail setlocal fo+=aw tw=72

    " When done autocompleting, close any preview windows
    autocmd CompleteDone * pclose

endif

" Enable spell checking (z= in normal mode for suggestions)
" set spell
" spellsuggest=best,10

" expand the file path to include all the subdirectories to the current
" directory
set path=.,/usr/include,**,,

" Set cute colorscheme.
colorscheme slate

" Set smart search (case sensitive only when capital letters in search phrase)
set ignorecase
set smartcase

" Set line numbering and its highlighting.
set number
highlight LineNr term=bold cterm=NONE ctermfg=LightGrey ctermbg=Black gui=NONE guifg=LightGrey guibg=Black

" Set highlighting for search.
highlight Search cterm=NONE ctermfg=White ctermbg=DarkGrey gui=NONE guifg=White guibg=DarkGrey

" Set highlighting for brackets
highlight MatchParen term=bold cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Black guibg=Yellow

" Set highlight for current line, and recolor it so it doesn't suck.
set cursorline
highlight CursorLine cterm=NONE ctermbg=NONE
highlight CursorLineNr term=bold ctermfg=Black ctermbg=Brown
