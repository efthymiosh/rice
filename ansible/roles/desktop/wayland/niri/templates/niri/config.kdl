// This config is in the KDL format: https://kdl.dev
// "/-" comments out the following node.
// Check the wiki for a full description of the configuration:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Overview

// Input device configuration.
// Find the full list of options on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Input
input {
  // delegate to systemd-logind
  disable-power-key-handling

  keyboard {
    xkb {
      // You can set rules, model, layout, variant and options.
      // For more information, see xkeyboard-config(7).
      layout "{{ niri_xkb_layout }}"
      options "grp:alt_space_toggle"
    }
    repeat-delay 250
    repeat-rate 28
  }

  // Next sections include libinput settings.
  // Omitting settings disables them, or leaves them at their default values.
  touchpad {
    // off
    tap
    dwt
    // dwtp
    // natural-scroll
    tap-button-map "left-right-middle" // maps taps to buttons: one-finger, two-fingers, three-fingers
    // accel-speed 0.2
    // accel-profile "flat"
    scroll-method "two-finger"
    // disabled-on-external-mouse
  }

  mouse {
    // off
    // natural-scroll
    // accel-speed 0.2
    // accel-profile "flat"
    // scroll-method "no-scroll"
  }

  trackpoint {
    // off
    // natural-scroll
    // accel-speed 0.2
    // accel-profile "flat"
    // scroll-method "on-button-down"
    // scroll-button 273
    // middle-emulation
  }

  // Uncomment this to make the mouse warp to the center of newly focused windows.
  // warp-mouse-to-focus

  // Focus windows and outputs automatically when moving the mouse into them.
  // Setting max-scroll-amount="0%" makes it work only on windows already fully on screen.
  // focus-follows-mouse max-scroll-amount="0%"
}

// You can configure outputs by their name, which you can find
// by running `niri msg outputs` while inside a niri instance.
// The built-in laptop monitor is usually called "eDP-1".
// Find more information on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Outputs
// Remember to uncomment the node by removing "/-"!
output "eDP-1" {
  // Uncomment this line to disable this output.
  // off

  // Resolution and, optionally, refresh rate of the output.
  // The format is "<width>x<height>" or "<width>x<height>@<refresh rate>".
  // If the refresh rate is omitted, niri will pick the highest refresh rate
  // for the resolution.
  // If the mode is omitted altogether or is invalid, niri will pick one automatically.
  // Run `niri msg outputs` while inside a niri instance to list all outputs and their modes.
  mode "1920x1200@120.000"

  // You can use integer or fractional scale, for example use 1.5 for 150% scale.
  scale 1

  // Transform allows to rotate the output counter-clockwise, valid values are:
  // normal, 90, 180, 270, flipped, flipped-90, flipped-180 and flipped-270.
  transform "normal"

  // Position of the output in the global coordinate space.
  // This affects directional monitor actions like "focus-monitor-left", and cursor movement.
  // The cursor can only move between directly adjacent outputs.
  // Output scale and rotation has to be taken into account for positioning:
  // outputs are sized in logical, or scaled, pixels.
  // For example, a 3840×2160 output with scale 2.0 will have a logical size of 1920×1080,
  // so to put another output directly adjacent to it on the right, set its x to 1920.
  // If the position is unset or results in an overlap, the output is instead placed
  // automatically.
  position x=0 y=960
}

output "Lenovo Group Limited P40w-20 V90AFBLG" {
  mode "5120x2160@60.000"
  scale 1
  transform "normal"
  position x=1920 y=0
}

hotkey-overlay {
  skip-at-startup
}

cursor {
  xcursor-theme "{{ x_cursor_theme }}"
  xcursor-size {{ x_cursor_size }}
  hide-when-typing
  hide-after-inactive-ms 60000
}

// Settings that influence how windows are positioned and sized.
// Find more information on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Layout
layout {
  // Set gaps around windows in logical pixels.
  gaps 16

  // When to center a column when changing focus, options are:
  // - "never", default behavior, focusing an off-screen column will keep at the left
  //   or right edge of the screen.
  // - "always", the focused column will always be centered.
  // - "on-overflow", focusing a column will center it if it doesn't fit
  //   together with the previously focused column.
  center-focused-column "never"

  default-column-display "tabbed"

  // You can customize the widths that "switch-preset-column-width" (Mod+R) toggles between.
  preset-column-widths {
    // Proportion sets the width as a fraction of the output width, taking gaps into account.
    // For example, you can perfectly fit four windows sized "proportion 0.25" on an output.
    // The default preset widths are 1/3, 1/2 and 2/3 of the output.
    proportion 0.5
    proportion 0.33333
    proportion 0.66667

    // Fixed sets the width in logical pixels exactly.
    // fixed 1920
  }

  // You can also customize the heights that "switch-preset-window-height" (Mod+Shift+R) toggles between.
  // preset-window-heights { }

  // You can change the default width of the new windows.
  default-column-width { proportion 0.5; }
  // If you leave the brackets empty, the windows themselves will decide their initial width.
  // default-column-width {}

  // By default focus ring and border are rendered as a solid background rectangle
  // behind windows. That is, they will show up through semitransparent windows.
  // This is because windows using client-side decorations can have an arbitrary shape.
  //
  // If you don't like that, you should uncomment `prefer-no-csd` below.
  // Niri will draw focus ring and border *around* windows that agree to omit their
  // client-side decorations.
  //
  // Alternatively, you can override it with a window rule called
  // `draw-border-with-background`.

  // You can change how the focus ring looks.
  focus-ring {
    // Uncomment this line to disable the focus ring.
    off

    // How many logical pixels the ring extends out from the windows.
    width 4

    // Colors can be set in a variety of ways:
    // - CSS named colors: "red"
    // - RGB hex: "#rgb", "#rgba", "#rrggbb", "#rrggbbaa"
    // - CSS-like notation: "rgb(255, 127, 0)", rgba(), hsl() and a few others.

    // Color of the ring on the active monitor.
    active-color "#7fc8ff"

    // Color of the ring on inactive monitors.
    inactive-color "#505050"

    // You can also use gradients. They take precedence over solid colors.
    // Gradients are rendered the same as CSS linear-gradient(angle, from, to).
    // The angle is the same as in linear-gradient, and is optional,
    // defaulting to 180 (top-to-bottom gradient).
    // You can use any CSS linear-gradient tool on the web to set these up.
    // Changing the color space is also supported, check the wiki for more info.
    //
    // active-gradient from="#80c8ff" to="#bbddff" angle=45

    // You can also color the gradient relative to the entire view
    // of the workspace, rather than relative to just the window itself.
    // To do that, set relative-to="workspace-view".
    //
    // inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
  }

  // You can also add a border. It's similar to the focus ring, but always visible.
  border {
    // The settings are the same as for the focus ring.
    // If you enable the border, you probably want to disable the focus ring.
    off

    width 4
    active-color "#ffc87f"
    inactive-color "#505050"

    // active-gradient from="#ffbb66" to="#ffc880" angle=45 relative-to="workspace-view"
    // inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
  }

  // You can enable drop shadows for windows.
  shadow {
    // Uncomment the next line to enable shadows.
    on

    // By default, the shadow draws only around its window, and not behind it.
    // Uncomment this setting to make the shadow draw behind its window.
    //
    // Note that niri has no way of knowing about the CSD window corner
    // radius. It has to assume that windows have square corners, leading to
    // shadow artifacts inside the CSD rounded corners. This setting fixes
    // those artifacts.
    // 
    // However, instead you may want to set prefer-no-csd and/or
    // geometry-corner-radius. Then, niri will know the corner radius and
    // draw the shadow correctly, without having to draw it behind the
    // window. These will also remove client-side shadows if the window
    // draws any.
    // 
    // draw-behind-window true

    // You can change how shadows look. The values below are in logical
    // pixels and match the CSS box-shadow properties.

    // Softness controls the shadow blur radius.
    softness 8

    // Spread expands the shadow.
    spread 1

    // Offset moves the shadow relative to the window.
    offset x=0 y=1

    // You can also change the shadow color and opacity.
    color  "#{{ theme.background | upper }}"
  }

  // Struts shrink the area occupied by windows, similarly to layer-shell panels.
  // You can think of them as a kind of outer gaps. They are set in logical pixels.
  // Left and right struts will cause the next window to the side to always be visible.
  // Top and bottom struts will simply add outer gaps in addition to the area occupied by
  // layer-shell panels and regular gaps.
  struts {
    left 0
    right 0
    top -8 // adjust for added "height" to waybar for its shadow
    // bottom 64
  }

  insert-hint {
      color "#{{ theme.accent }}80"
  }
  tab-indicator {
    // off
    hide-when-single-tab
    gap -8
    width 8
    length total-proportion=0.2
    position "right"
    gaps-between-tabs 2
    corner-radius 8
    active-color "#{{ theme.accent }}"
    inactive-color "#{{ theme.bright.black }}"
  }
}

// Add lines like this to spawn processes at startup.
// Note that running niri as a session supports xdg-desktop-autostart,
// which may be more convenient to use.
// See the binds section below for more spawn examples.
// spawn-at-startup "xwayland-satellite"

environment {
  DISPLAY ":0"
}

// Uncomment this line to ask the clients to omit their client-side decorations if possible.
// If the client will specifically ask for CSD, the request will be honored.
// Additionally, clients will be informed that they are tiled, removing some client-side rounded corners.
// This option will also fix border/focus ring drawing behind some semitransparent windows.
// After enabling or disabling this, you need to restart the apps for this to take effect.
prefer-no-csd

// You can change the path where screenshots are saved.
// A ~ at the front will be expanded to the home directory.
// The path is formatted with strftime(3) to give you the screenshot date and time.
screenshot-path "~/screen-%Y-%m-%d %H-%M-%S.png"

// You can also set this to null to disable saving screenshots to disk.
// screenshot-path null

// Animation settings.
// The wiki explains how to configure individual animations:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Animations
animations {
   slowdown 1.2
}

// Window rules let you adjust behavior for individual windows.
// Find more information on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Window-Rules

// Work around WezTerm's initial configure bug
// by setting an empty default-column-width.
/- window-rule {
  // This regular expression is intentionally made as specific as possible,
  // since this is the default config, and we want no false positives.
  // You can get away with just app-id="wezterm" if you want.
  match app-id=r#"^org\.wezfurlong\.wezterm$"#
  default-column-width {}
}

// Open the Firefox picture-in-picture player as floating by default.
/- window-rule {
  // This app-id regular expression will work for both:
  // - host Firefox (app-id is "firefox")
  // - Flatpak Firefox (app-id is "org.mozilla.firefox")
  match app-id=r#"firefox$"# title="^Picture-in-Picture$"
  open-floating true
}

// Example: block out two password managers from screen capture.
// (This example rule is commented out with a "/-" in front.)
/-window-rule {
  match app-id=r#"^org\.keepassxc\.KeePassXC$"#
  match app-id=r#"^org\.gnome\.World\.Secrets$"#

  block-out-from "screen-capture"

  // Use this instead if you want them visible on third-party screenshot tools.
  // block-out-from "screencast"
}

// Example: enable rounded corners for all windows.
// (This example rule is commented out with a "/-" in front.)
window-rule {
  geometry-corner-radius 20
  clip-to-geometry true
  opacity 1.0
}

window-rule {
  match is-active=false
  opacity 0.975
}

window-rule {
  match app-id="^Zoom Workplace$"
  block-out-from "screencast"
  open-floating true
}

// layer rules for launcher and bar
layer-rule {
  match namespace="^launcher$"

  shadow {
    on
  }
  geometry-corner-radius 10
}

layer-rule {
  match namespace="^rofi$"
  geometry-corner-radius 20
  shadow {
    on
  }
}

layer-rule {
  match namespace="^waybar$"
  geometry-corner-radius 10
}

layer-rule {
  match namespace="^notifications$"

  geometry-corner-radius 10
  shadow {
    on
  }
}

binds {
  // Keys consist of modifiers separated by + signs, followed by an XKB key name
  // in the end. To find an XKB name for a particular key, you may use a program
  // like wev.
  //
  // "Mod" is a special modifier equal to Super when running on a TTY, and to Alt
  // when running as a winit window.
  //
  // Most actions that you can bind here can also be invoked programmatically with
  // `niri msg action do-something`.

  // Mod-Shift-/, which is usually the same as Mod-?,
  // shows a list of important hotkeys.
  Super+Shift+Slash { show-hotkey-overlay; }

  Super+Return { spawn "alacritty" "-e" "{{ default_shell }}" "-c" "[ \"$(tmux list-sessions  | grep -v attached | wc -l)\" -ne \"0\" ] && tmux attach-session || tmux new-session -t0"; }
  Super+D { spawn "fuzzel"; }
  //Super+D repeat=false { spawn "rofi" "-modi" "combi" "-show" "combi"; }
  Super+Tab repeat=false { spawn "rofi" "-modi" "window" "-show" "window"; }
  Super+Alt+L { spawn "swaylock" "-f"; }

  // You can also use a shell. Do this if you need pipes, multiple commands, etc.
  // Note: the entire command goes as a single argument in the end.
  // Mod+T { spawn "bash" "-c" "notify-send hello && exec alacritty"; }

  // Example volume keys mappings for PipeWire & WirePlumber.
  // The allow-when-locked=true property makes them work even when the session is locked.
  XF86AudioRaiseVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.05+" "-l" "1.0"; }
  XF86AudioLowerVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.05-" "-l" "1.0"; }
  XF86AudioMute        allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"; }
  XF86AudioMicMute     allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SOURCE@" "toggle"; }

  Super+Shift+C { close-window; }

  Super+H     { focus-column-or-monitor-left; }
  Super+J     { focus-window-or-workspace-down; }
  Super+K     { focus-window-or-workspace-up; }
  Super+L     { focus-column-or-monitor-right; }

  Super+Shift+H     { move-column-left-or-to-monitor-left; }
  Super+Shift+J     { move-window-down-or-to-workspace-down; }
  Super+Shift+K     { move-window-up-or-to-workspace-up; }
  Super+Shift+L     { move-column-right-or-to-monitor-right; }

  // Finer width adjustments.
  // This command can also:
  // * set width in pixels: "1000"
  // * adjust width in pixels: "-5" or "+5"
  // * set width as a percentage of screen width: "25%"
  // * adjust width as a percentage of screen width: "-10%" or "+10%"
  // Pixel sizes use logical, or scaled, pixels. I.e. on an output with scale 2.0,
  // set-column-width "100" will make the column occupy 200 physical screen pixels.
  Super+Ctrl+H { set-column-width "-10%"; }
  Super+Ctrl+J { set-window-height "+10%"; }
  Super+Ctrl+K { set-window-height "-10%"; }
  Super+Ctrl+L { set-column-width "+10%"; }

  // The following binds move the focused window in and out of a column.
  // If the window is alone, they will consume it into the nearby column to the side.
  // If the window is already in a column, they will expel it out.
  //Super+R  { consume-or-expel-window-left; }

  // Consume one window from the right to the bottom of the focused column.
  //Mod+Comma  { consume-window-into-column; }
  // Expel the bottom window from the focused column to the right.
  //Mod+Period { expel-window-from-column; }

  // Mod+Shift+R { switch-preset-window-height; }
  //Mod+Ctrl+R { reset-window-height; }
  Super+F { fullscreen-window; }
  Super+R { maximize-column; }
  Super+C { toggle-column-tabbed-display; }
  Super+Space { center-column; }
  Super+O { switch-preset-column-width; }


  // Move the focused window between the floating and the tiling layout.
  Super+S       { toggle-window-floating; }
  Super+Shift+S { switch-focus-between-floating-and-tiling; }

  Print       { spawn "sh" "-c" "grim -g \"$(slurp)\" - | wl-copy"; }
  Super+Print { spawn "sh" "-c" "grim -g \"$(slurp)\" - | tee ~/screen-$(date +%Y%b%d.%H:%M:%S).png | wl-copy"; }
  Ctrl+Print  { screenshot-screen; }
  Alt+Print   { screenshot-window; }

  XF86MonBrightnessUp   { spawn "brightnessctl" "-e" "s" "+5%"; }
  XF86MonBrightnessDown { spawn "brightnessctl" "-e" "s" "5%-"; }

  XF86AudioNext  { spawn "playerctl" "next"; }
  XF86AudioPause { spawn "playerctl" "play-pause"; }
  XF86AudioPlay  { spawn "playerctl" "play-pause"; }
  XF86AudioPrev  { spawn "playerctl" "previous"; }

  // Mouse bindings
  Mod+WheelScrollDown  cooldown-ms=150 { focus-workspace-down; }
  Mod+WheelScrollUp    cooldown-ms=150 { focus-workspace-up; }
  Mod+WheelScrollRight cooldown-ms=150 { focus-column-right; }
  Mod+WheelScrollLeft  cooldown-ms=150 { focus-column-left; }

  // Applications such as remote-desktop clients and software KVM switches may
  // request that niri stops processing the keyboard shortcuts defined here
  // so they may, for example, forward the key presses as-is to a remote machine.
  // It's a good idea to bind an escape hatch to toggle the inhibitor,
  // so a buggy application can't hold your session hostage.
  //
  // The allow-inhibiting=false property can be applied to other binds as well,
  // which ensures niri always processes them, even when an inhibitor is active.
  Super+Escape allow-inhibiting=false { toggle-keyboard-shortcuts-inhibit; }

  // The quit action will show a confirmation dialog to avoid accidental exits.
  Super+Shift+Q { quit skip-confirmation=true; }
}
